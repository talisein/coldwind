  * Lurker should use a std::set rather than std::list [Easy] (Just
    make sure you test this. The hash should be based on just the
    thread, not every element. [Easy+]

  * Record download statistics from curl (Time, Bytes), populate back
    to UI [Medium] [Mostly done]

  * Decode curl's error messages and put on std:cerr [Easy] [Mostly
    done]

  * Redirect std::cout and std::cerr to an optional popup message log
    [Hard] (There's actually a Glib API for this in g_log)

  * Capture libxml errors and do the right thing. [Easy] [Mostly done]

  * Overlay some lurker info text on the image [Medium]
  ** Or some sort of visual lurker feedback. I dunno. [Hard]
  *** Well, there's some std::cout things now. [Partly done]

  * In Glib 3.32, use GResources. And it looks like GApplication will
    finally land. [Longterm]

  * Store the hash cache to disk [Medium]

  * Accept options for number of hashing threads & curl connections [Easy]

  * Don't lock the UI during download. There should be a creative use
    of Glib::Mutex as an alternative to try_download() testing. [Medium]

  * set_sensitivity(false) on the spinner when lurk-to-404 [Easy]

  * Catch signal_fetching_error from Parser [Easy]

  * Make sure that we ignore everything after # after the last / in
    the thread url [Easy]

  * Make a utility function to implement getBoard(), getThread(). Have
    Request use that, and then application can use the utility
    functions directly in update_thread_dir_completer [Easy]

  * Save the thread to the target directory and re-write image links
    to the file we save to. [Hard+]

  * Subclass Window and move all the UI stuff out of application
    [Easy+]
